package com.android.loter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.loter.db.Attendace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTENDACE.
*/
public class AttendaceDao extends AbstractDao<Attendace, Long> {

    public static final String TABLENAME = "ATTENDACE";

    /**
     * Properties of entity Attendace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Projectid = new Property(3, int.class, "projectid", false, "PROJECTID");
        public final static Property Imageid = new Property(4, Integer.class, "imageid", false, "IMAGEID");
        public final static Property Imagebase64 = new Property(5, String.class, "imagebase64", false, "IMAGEBASE64");
        public final static Property Lot = new Property(6, String.class, "lot", false, "LOT");
        public final static Property Lat = new Property(7, String.class, "lat", false, "LAT");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Projectlocationid = new Property(9, int.class, "projectlocationid", false, "PROJECTLOCATIONID");
        public final static Property NetworkTime = new Property(10, String.class, "networkTime", false, "NETWORK_TIME");
    };


    public AttendaceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTENDACE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TIME' TEXT NOT NULL ," + // 1: time
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'PROJECTID' INTEGER NOT NULL ," + // 3: projectid
                "'IMAGEID' INTEGER," + // 4: imageid
                "'IMAGEBASE64' TEXT," + // 5: imagebase64
                "'LOT' TEXT," + // 6: lot
                "'LAT' TEXT," + // 7: lat
                "'ADDRESS' TEXT," + // 8: address
                "'PROJECTLOCATIONID' INTEGER NOT NULL ," + // 9: projectlocationid
                "'NETWORK_TIME' TEXT);"); // 10: networkTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTENDACE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attendace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTime());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getProjectid());
 
        Integer imageid = entity.getImageid();
        if (imageid != null) {
            stmt.bindLong(5, imageid);
        }
 
        String imagebase64 = entity.getImagebase64();
        if (imagebase64 != null) {
            stmt.bindString(6, imagebase64);
        }
 
        String lot = entity.getLot();
        if (lot != null) {
            stmt.bindString(7, lot);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
        stmt.bindLong(10, entity.getProjectlocationid());
 
        String networkTime = entity.getNetworkTime();
        if (networkTime != null) {
            stmt.bindString(11, networkTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attendace readEntity(Cursor cursor, int offset) {
        Attendace entity = new Attendace( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // time
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // projectid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // imageid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imagebase64
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lot
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.getInt(offset + 9), // projectlocationid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // networkTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attendace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setProjectid(cursor.getInt(offset + 3));
        entity.setImageid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImagebase64(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLot(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProjectlocationid(cursor.getInt(offset + 9));
        entity.setNetworkTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attendace entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attendace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
