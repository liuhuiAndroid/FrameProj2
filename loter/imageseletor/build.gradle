apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'


def cfg = rootProject.ext.configuration

android {

    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSDK
        targetSdkVersion 23
        versionCode cfg.version_code
        versionName cfg.version_name
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// 注释冲突,annotation.processing.Processor 冲突


dependencies {
    def libs = rootProject.ext.libs // 库
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support:support-v4:${libs.supportVersion}"
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.android.support:percent:${libs.supportVersion}"
    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile 'konifar:fab-transformation:1.0.0'
    compile 'com.github.chrisbanes:PhotoView:1.2.6'
}




def siteUrl = 'https://github.com/lijunguan/AlbumSelector'    // project homepage
def gitUrl = 'https://github.com/lijunguan/AlbumSelector.git' // project git

version = "1.0.2"

group = "com.lijunguan"

//
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintrayUser")
    key = properties.getProperty("bintrayApikey")

//    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "image-selector"                // project name in jcenter
        desc = "a image selector module for android "
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        labels = ['aar', 'android']
        publish = true
    }
}

// 根节点添加
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name 'Image Selector For Android'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'lijunguan'
                        name 'io.github.lijunguan'
                        email '731212914@qq.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}



task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

javadoc { //jav doc采用utf-8编码否则会报“GBK的不可映射字符”错误
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }